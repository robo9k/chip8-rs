var searchIndex = JSON.parse('{\
"chip_8":{"doc":"Virtual machine for the CHIP-8 programming language","t":[0,0,0,0,0,0,3,4,13,18,13,13,13,4,3,3,18,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,13,6,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,13,13,13,3,13,6,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,6,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11],"n":["display","errors","instructions","keypad","memory","vm","Display","DrawResult","Drawn","HEIGHT","Off","On","Overdrawn","Pixel","Sprite","SpriteRow","WIDTH","XCoordinate","YCoordinate","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","draw","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","ne","ne","ne","ne","new","new","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wrapping_add","wrapping_add","Chip8Error","InvalidKey","InvalidRegister","OutOfRange","Result","UnimplementedInstruction","UnknownInstruction","borrow","borrow_mut","eq","fmt","fmt","from","into","ne","to_string","try_from","try_into","type_id","vzip","0","0","0","0","0","Add","AddI","AddOperand","Addr","And","Byte","Call","Clear","Draw","Instruction","Jump","Load","LoadBinaryCodedDecimal","LoadDelayTimerRegister","LoadI","LoadKey","LoadMemoryRegisters","LoadOperand","LoadRegisterDelayTimer","LoadRegistersMemory","LoadSoundTimerRegister","LoadSprite","LongJump","Nibble","Or","Random","Return","ShiftLeft","ShiftRight","SkipEqual","SkipEqualOperand","SkipKeyNotPressed","SkipKeyPressed","SkipNotEqual","SkipNotEqualOperand","Sub","SubNegated","Sys","V0","V1","V2","V3","V4","V5","V6","V7","V8","V9","VA","VB","VC","VD","VE","VF","VRegister","Vx","Vy","XOr","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","decode","encode","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","iter_to","ne","ne","ne","new","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","2","Key","Key0","Key1","Key2","Key3","Key4","Key5","Key6","Key7","Key8","Key9","KeyA","KeyB","KeyC","KeyD","KeyE","KeyF","KeyState","Keypad","NotPressed","Pressed","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","eq","eq","eq","fmt","fmt","fmt","from","from","from","index","index_mut","into","into","into","ne","new","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Memory","borrow","borrow_mut","default","from","into","new","read","try_from","try_into","type_id","vzip","write","VM","borrow","borrow_mut","default","from","into","new","try_from","try_into","type_id","vzip"],"q":["chip_8","","","","","","chip_8::display","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","chip_8::errors","","","","","","","","","","","","","","","","","","","","chip_8::errors::Chip8Error","","","","","chip_8::instructions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","chip_8::instructions::Instruction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","chip_8::keypad","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","chip_8::memory","","","","","","","","","","","","","chip_8::vm","","","","","","","","","",""],"d":["Display","Crate error types","Machine language and byte code instructions","Keys and keypad","Memory","Virtual machine","Display with 64 * 32 monochrome pixels","Result from drawing a sprite.","Pixels were only set to <code>On</code> state","Vertical pixel count","Off","On","Some pixels were erased while drawing","Monochrome pixel","Sprite of several rows of pixels","Row of 8 pixels in a sprite","Horizontal pixel count","X coordinate of a <code>Pixel</code> on the <code>Display</code>","Y coordinate of a <code>Pixel</code> on the <code>Display</code>","","","","","","","","","","","","","","","","Clears the display by setting all pixels to the <code>Off</code> state","","","","","","","","","","","Draw <code>sprite</code> at the given <code>x</code> + <code>y</code> coordinates","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new instance, wrapping around the display if …","Creates a new instance, wrapping around the display if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a new x coordinate that might have wrapped around …","Returns a new y coordinate that might have wrapped around …","Error type for all errors in this crate","Invalid key definition","Invalid register definition","Value is out of valid range","Result alias","Known but unimplemented instruction","Unknown instruction","","","","","","","","","","","","","","","","","","","Sets <code>Vx</code> to <code>Vx + Vy</code>, <code>VF</code> to carry","Add <code>Vx</code> to <code>I</code>","Adds <code>byte</code> to <code>Vx</code>, then stores it in <code>Vx</code>","Absolute memory address","Sets <code>Vx</code> to <code>Vx AND Vy</code>","A byte","Calls subroutine at <code>Addr</code>","Clears the display","Read <code>n</code> bytes of memory from address <code>I</code>, draw it at <code>Vx</code> and <code>Vy</code>…","Byte code instruction","Jumps to <code>Addr</code>","Loads <code>Vy</code> into <code>Vx</code>","Store binary-coded decimal (BCD) at <code>I</code>, <code>I</code>+1 and <code>I</code>+2","Set delay timer to <code>Vx</code>","Loads <code>Addr</code> into register <code>I</code>","Wait for key press and store it in <code>Vx</code>","Store registers <code>V0</code>..<code>Vx</code> in memory at <code>I</code>","Loads <code>byte</code> into <code>Vx</code>","Set <code>Vx</code> to delay timer value","Read registers <code>V0</code>..<code>Vx</code> from memory at <code>I</code>","Set sound timer to <code>Vx</code>","Set <code>I</code> to the address of the sprite <code>Vx</code>","Jumps to <code>Addr + V0</code>","Hex digit","Sets <code>Vx</code> to <code>Vx OR Vy</code>","Sets <code>Vx</code> to random number AND <code>kk</code>","Returns from a subroutine","Sets <code>Vx</code> to <code>Vy SHL 1</code>","Sets <code>Vx</code> to <code>Vy SHR 1</code>","Skips next instruction if <code>Vy</code> is equal to <code>Vy</code>","Skips next instruction if <code>Vx</code> equals <code>byte</code>","Skip next instruction if key <code>Vx</code> is not pressed","Skip next instruction if key <code>Vx</code> is pressed","Skips next instruction if <code>Vx</code> is not equal to <code>Vy</code>","Skips next instruction if <code>Vx</code> is not equal to <code>byte</code>","Sets <code>Vx</code> to <code>Vx - Vy</code>, <code>VF</code> to not borrow","Sets <code>Vx</code> to <code>Vy - Vx</code>, <code>VF</code> to not borrow","Jumps to machine routine at <code>Addr</code>","","","","","","","","","","","","","","","","","General purpose register","First register in an instruction","Second register in an instruction","Sets <code>Vx</code> to <code>Vx XOR Vy</code>","","","","","","","","","","","","","","","","","Decodes raw <code>bits</code> into a valid <code>Instruction</code>","Encodes a valid <code>Instruction</code> into raw bits","","","","","","","","","","","","","","","","","","","Returns an <code>Iterator</code> from <code>V0</code> up to including <code>upper_bound</code>","","","","Creates a new instance if <code>bits</code> is valid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Individual key on the <code>Keypad</code>","Key <code>0</code>","Key <code>1</code>","Key <code>2</code>","Key <code>3</code>","Key <code>4</code>","Key <code>5</code>","Key <code>6</code>","Key <code>7</code>","Key <code>8</code>","Key <code>9</code>","Key <code>A</code>","Key <code>B</code>","Key <code>C</code>","Key <code>D</code>","Key <code>E</code>","Key <code>F</code>","Possible state for each key","16-key hexadecimal keypad","Key not pressed","Key pressed","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new instance with default state for each key","","","","","","","","","","","","","","","","","RAM","","","","","","Creates a new instance intialized with <code>0</code>","Reads a byte at <code>addr</code>","","","","","Writes a <code>val</code> byte at <code>addr</code>","Virtual machine","","","Creates a new instance with thread-local random number …","","","Creates a new instance with the given RNG","","","",""],"i":[0,0,0,0,0,0,0,0,1,2,3,3,1,0,0,0,2,0,0,3,2,3,1,4,5,6,7,2,3,1,4,5,6,7,2,3,1,4,5,3,1,4,5,2,3,2,3,1,4,5,6,7,3,3,1,4,5,6,6,7,7,2,3,1,4,5,6,6,7,7,2,3,1,4,5,6,7,4,5,6,7,4,5,3,1,4,5,3,6,7,2,3,1,4,5,6,7,2,3,1,4,5,6,7,2,3,1,4,5,6,7,2,3,1,4,5,6,7,4,5,0,8,8,8,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,10,11,12,13,14,14,14,0,14,0,14,14,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,14,15,16,17,14,15,16,17,14,15,16,17,14,15,16,17,14,14,14,15,16,17,14,15,16,17,14,15,16,16,17,17,14,15,16,17,14,15,16,17,14,16,15,16,17,14,15,15,16,17,14,15,16,17,14,15,16,17,14,15,16,17,14,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,38,39,39,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,0,0,52,52,52,51,53,52,51,53,52,51,53,52,51,53,52,53,52,51,53,52,51,53,52,51,53,53,53,52,51,53,53,53,52,51,53,52,51,51,53,52,51,53,52,51,53,52,51,53,0,54,54,54,54,54,54,54,54,54,54,54,54,0,55,55,55,55,55,55,55,55,55,55],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["pixel",4]],[[],["drawresult",4]],[[],["xcoordinate",3]],[[],["ycoordinate",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["sprite",3],["xcoordinate",3],["ycoordinate",3]],["drawresult",4]],[[["pixel",4]],["bool",15]],[[["drawresult",4]],["bool",15]],[[["xcoordinate",3]],["bool",15]],[[["ycoordinate",3]],["bool",15]],[[["spriterow",3]],["bool",15]],[[["sprite",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u8",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["xcoordinate",3]],["bool",15]],[[["ycoordinate",3]],["bool",15]],[[["spriterow",3]],["bool",15]],[[["sprite",3]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],null,null,null,null,null,null,null,[[]],[[]],[[["chip8error",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["chip8error",4]],["bool",15]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vregister",4]],[[],["addr",3]],[[],["nibble",3]],[[],["instruction",4]],[[]],[[]],[[]],[[]],[[["u16",15]],["result",6]],[[],["u16",15]],[[["vregister",4]],["bool",15]],[[["addr",3]],["bool",15]],[[["nibble",3]],["bool",15]],[[["instruction",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u16",15]]],[[]],[[["u8",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vregister",4]]],[[["addr",3]],["bool",15]],[[["nibble",3]],["bool",15]],[[["instruction",4]],["bool",15]],[[["u16",15]],["result",6]],[[]],[[]],[[]],[[]],[[],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["keystate",4]],[[],["key",4]],[[],["keypad",3]],[[]],[[]],[[]],[[]],[[]],[[["keystate",4]],["bool",15]],[[["key",4]],["bool",15]],[[["keypad",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["key",4]]],[[["key",4]]],[[]],[[]],[[]],[[["keypad",3]],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[["addr",3]],["u8",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["addr",3],["u8",15]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]]],"p":[[4,"DrawResult"],[3,"Display"],[4,"Pixel"],[3,"XCoordinate"],[3,"YCoordinate"],[3,"SpriteRow"],[3,"Sprite"],[4,"Chip8Error"],[13,"InvalidRegister"],[13,"UnknownInstruction"],[13,"UnimplementedInstruction"],[13,"InvalidKey"],[13,"OutOfRange"],[4,"Instruction"],[4,"VRegister"],[3,"Addr"],[3,"Nibble"],[13,"Sys"],[13,"Jump"],[13,"Call"],[13,"SkipEqualOperand"],[13,"SkipNotEqualOperand"],[13,"SkipEqual"],[13,"LoadOperand"],[13,"AddOperand"],[13,"Load"],[13,"Or"],[13,"And"],[13,"XOr"],[13,"Add"],[13,"Sub"],[13,"ShiftRight"],[13,"SubNegated"],[13,"ShiftLeft"],[13,"SkipNotEqual"],[13,"LoadI"],[13,"LongJump"],[13,"Random"],[13,"Draw"],[13,"SkipKeyPressed"],[13,"SkipKeyNotPressed"],[13,"LoadRegisterDelayTimer"],[13,"LoadKey"],[13,"LoadDelayTimerRegister"],[13,"LoadSoundTimerRegister"],[13,"AddI"],[13,"LoadSprite"],[13,"LoadBinaryCodedDecimal"],[13,"LoadMemoryRegisters"],[13,"LoadRegistersMemory"],[4,"Key"],[4,"KeyState"],[3,"Keypad"],[3,"Memory"],[3,"VM"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};