var searchIndex = JSON.parse('{\
"chip8":{"doc":"Virtual machine for the CHIP-8 programming language","i":[[0,"errors","chip8","Crate error types",null,null],[4,"Chip8Error","chip8::errors","Error type for all errors in this crate",null,null],[0,"instructions","chip8","Machine language and byte code instructions",null,null],[3,"Addr","chip8::instructions","Absolute memory address",null,null],[4,"VRegister","","General purpose register",null,null],[13,"V0","","",0,null],[13,"V1","","",0,null],[13,"V2","","",0,null],[13,"V3","","",0,null],[13,"V4","","",0,null],[13,"V5","","",0,null],[13,"V6","","",0,null],[13,"V7","","",0,null],[13,"V8","","",0,null],[13,"V9","","",0,null],[13,"VA","","",0,null],[13,"VB","","",0,null],[13,"VC","","",0,null],[13,"VD","","",0,null],[13,"VE","","",0,null],[13,"VF","","",0,null],[4,"Instruction","","Byte code instruction",null,null],[13,"Sys","","Jumps to machine routine at `Addr`",1,null],[13,"Clear","","Clears the display",1,null],[13,"Return","","Returns from a subroutine",1,null],[13,"Jump","","Jumps to `Addr`",1,null],[13,"Call","","Calls subroutine at `Addr`",1,null],[13,"SkipEqualOperand","","Skips next instruction if `Vx` equals `byte`",1,null],[13,"SkipNotEqualOperand","","Skips next instruction if `Vx` is not equal to `byte`",1,null],[13,"SkipEqual","","Skips next instruction if `Vy` is equal to `Vy`",1,null],[13,"LoadOperand","","Loads `byte` into `Vx`",1,null],[13,"AddOperand","","Adds `byte` to `Vx`, then stores it in `Vx`",1,null],[13,"Load","","Loads `Vy` into `Vx`",1,null],[13,"Or","","Sets `Vx` to `Vx OR Vy`",1,null],[13,"And","","Sets `Vx` to `Vx AND Vy`",1,null],[13,"XOr","","Sets `Vx` to `Vx XOR Vy`",1,null],[13,"Add","","Sets `Vx` to `Vx + Vy`, `VF` to carry",1,null],[13,"Sub","","Sets `Vx` to `Vx - Vy`, `VF` to not borrow",1,null],[13,"ShiftRight","","Sets `Vx` to `Vy SHR 1`",1,null],[13,"SubNegated","","Sets `Vx` to `Vy - Vx`, `VF` to not borrow",1,null],[13,"ShiftLeft","","Sets `Vx` to `Vy SHL 1`",1,null],[13,"SkipNotEqual","","Skips next instruction if `Vx` is not equal to `Vy`",1,null],[13,"LoadI","","Loads `Addr` into register `I`",1,null],[13,"LongJump","","Jumps to `Addr + V0`",1,null],[6,"Vx","","First register in an instruction",null,null],[6,"Vy","","Second register in an instruction",null,null],[6,"Byte","","A byte",null,null],[11,"from","","Matches `bits` to an `VRegister`",0,[[],[["vregister",4],["option",4]]]],[11,"decode","","Decodes raw `bits` into a valid `Instruction`",1,[[],[["option",4],["instruction",4]]]],[0,"vm","chip8","Virtual machine",null,null],[3,"VRegisters","chip8::vm","General purpose registers",null,null],[3,"VM","","Virtual machine",null,null],[6,"VRegisterValue","","Type of a general purpose register in the VM",null,null],[11,"new","","Creates a new instance with default values",2,[[]]],[11,"new","","Creates a new instance",3,[[]]],[11,"from","chip8::errors","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","chip8::instructions","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","chip8::vm","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","chip8::instructions","",5,[[],["addr",3]]],[11,"clone","","",0,[[],["vregister",4]]],[11,"clone","","",5,[[],["addr",3]]],[11,"clone","","",1,[[],["instruction",4]]],[11,"default","chip8::vm","",2,[[]]],[11,"eq","chip8::instructions","",0,[[["vregister",4]]]],[11,"eq","","",5,[[["addr",3]]]],[11,"ne","","",5,[[["addr",3]]]],[11,"eq","","",1,[[["instruction",4]]]],[11,"ne","","",1,[[["instruction",4]]]],[11,"fmt","chip8::errors","",4,[[["formatter",3]],["result",6]]],[11,"fmt","chip8::instructions","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","chip8::vm","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","chip8::errors","",4,[[["formatter",3]],["result",6]]],[11,"index","chip8::vm","",2,[[["vregister",4]]]],[11,"index_mut","","",2,[[["vregister",4]]]]],"p":[[4,"VRegister"],[4,"Instruction"],[3,"VRegisters"],[3,"VM"],[4,"Chip8Error"],[3,"Addr"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);