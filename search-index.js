var searchIndex = JSON.parse('{\
"chip_8":{"doc":"Virtual machine for the CHIP-8 programming language","i":[[0,"display","chip_8","Display",null,null],[3,"XCoordinate","chip_8::display","X coordinate of a `Pixel` on the `Display`",null,null],[3,"YCoordinate","","Y coordinate of a `Pixel` on the `Display`",null,null],[3,"Display","","Display with 64 * 32 monochrome pixels",null,null],[3,"SpriteRow","","Row of 8 pixels in a sprite",null,null],[3,"Sprite","","Sprite of several rows of pixels",null,null],[4,"Pixel","","Monochrome pixel",null,null],[13,"Off","","Off",0,null],[13,"On","","On",0,null],[4,"DrawResult","","Result from drawing a sprite.",null,null],[13,"Drawn","","Pixels were only set to `On` state",1,null],[13,"Overdrawn","","Some pixels were erased while drawing",1,null],[11,"new","","Creates a new instance, wrapping around the display if…",2,[[]]],[11,"wrapping_add","","Returns a new x coordinate that might have wrapped around…",2,[[]]],[11,"new","","Creates a new instance, wrapping around the display if…",3,[[]]],[11,"wrapping_add","","Returns a new y coordinate that might have wrapped around…",3,[[]]],[18,"WIDTH","","Horizontal pixel count",4,null],[18,"HEIGHT","","Vertical pixel count",4,null],[11,"clear","","Clears the display by setting all pixels to the `Off` state",4,[[]]],[11,"draw","","Draw `sprite` at the given `x` + `y` coordinates",4,[[["xcoordinate",3],["ycoordinate",3],["sprite",3]],["drawresult",4]]],[0,"errors","chip_8","Crate error types",null,null],[4,"Chip8Error","chip_8::errors","Error type for all errors in this crate",null,null],[13,"InvalidRegister","","Invalid register definition",5,null],[13,"UnknownInstruction","","Unknown instruction",5,null],[13,"UnimplementedInstruction","","Known but unimplemented instruction",5,null],[13,"InvalidKey","","Invalid key definition",5,null],[13,"OutOfRange","","Value is out of valid range",5,null],[6,"Result","","Result alias",null,null],[0,"instructions","chip_8","Machine language and byte code instructions",null,null],[3,"Addr","chip_8::instructions","Absolute memory address",null,null],[3,"Nibble","","Hex digit",null,null],[4,"VRegister","","General purpose register",null,null],[13,"V0","","",6,null],[13,"V1","","",6,null],[13,"V2","","",6,null],[13,"V3","","",6,null],[13,"V4","","",6,null],[13,"V5","","",6,null],[13,"V6","","",6,null],[13,"V7","","",6,null],[13,"V8","","",6,null],[13,"V9","","",6,null],[13,"VA","","",6,null],[13,"VB","","",6,null],[13,"VC","","",6,null],[13,"VD","","",6,null],[13,"VE","","",6,null],[13,"VF","","",6,null],[4,"Instruction","","Byte code instruction",null,null],[13,"Sys","","Jumps to machine routine at `Addr`",7,null],[13,"Clear","","Clears the display",7,null],[13,"Return","","Returns from a subroutine",7,null],[13,"Jump","","Jumps to `Addr`",7,null],[13,"Call","","Calls subroutine at `Addr`",7,null],[13,"SkipEqualOperand","","Skips next instruction if `Vx` equals `byte`",7,null],[13,"SkipNotEqualOperand","","Skips next instruction if `Vx` is not equal to `byte`",7,null],[13,"SkipEqual","","Skips next instruction if `Vy` is equal to `Vy`",7,null],[13,"LoadOperand","","Loads `byte` into `Vx`",7,null],[13,"AddOperand","","Adds `byte` to `Vx`, then stores it in `Vx`",7,null],[13,"Load","","Loads `Vy` into `Vx`",7,null],[13,"Or","","Sets `Vx` to `Vx OR Vy`",7,null],[13,"And","","Sets `Vx` to `Vx AND Vy`",7,null],[13,"XOr","","Sets `Vx` to `Vx XOR Vy`",7,null],[13,"Add","","Sets `Vx` to `Vx + Vy`, `VF` to carry",7,null],[13,"Sub","","Sets `Vx` to `Vx - Vy`, `VF` to not borrow",7,null],[13,"ShiftRight","","Sets `Vx` to `Vy SHR 1`",7,null],[13,"SubNegated","","Sets `Vx` to `Vy - Vx`, `VF` to not borrow",7,null],[13,"ShiftLeft","","Sets `Vx` to `Vy SHL 1`",7,null],[13,"SkipNotEqual","","Skips next instruction if `Vx` is not equal to `Vy`",7,null],[13,"LoadI","","Loads `Addr` into register `I`",7,null],[13,"LongJump","","Jumps to `Addr + V0`",7,null],[13,"Random","","Sets `Vx` to random number AND `kk`",7,null],[13,"Draw","","Read `n` bytes of memory from address `I`, draw it at `Vx`…",7,null],[13,"SkipKeyPressed","","Skip next instruction if key `Vx` is pressed",7,null],[13,"SkipKeyNotPressed","","Skip next instruction if key `Vx` is not pressed",7,null],[13,"LoadRegisterDelayTimer","","Set `Vx` to delay timer value",7,null],[13,"LoadKey","","Wait for key press and store it in `Vx`",7,null],[13,"LoadDelayTimerRegister","","Set delay timer to `Vx`",7,null],[13,"LoadSoundTimerRegister","","Set sound timer to `Vx`",7,null],[13,"AddI","","Add `Vx` to `I`",7,null],[13,"LoadSprite","","Set `I` to the address of the sprite `Vx`",7,null],[13,"LoadBinaryCodedDecimal","","Store binary-coded decimal (BCD) at `I`, `I`+1 and `I`+2",7,null],[13,"LoadMemoryRegisters","","Store registers `V0`..`Vx` in memory at `I`",7,null],[13,"LoadRegistersMemory","","Read registers `V0`..`Vx` from memory at `I`",7,null],[6,"Vx","","First register in an instruction",null,null],[6,"Vy","","Second register in an instruction",null,null],[6,"Byte","","A byte",null,null],[11,"iter_to","","Returns an `Iterator` from `V0` up to including…",6,[[["vregister",4]]]],[11,"new","","Creates a new instance if `bits` is valid # Errors",8,[[],["result",6]]],[11,"decode","","Decodes raw `bits` into a valid `Instruction`",7,[[],["result",6]]],[11,"encode","","Encodes a valid `Instruction` into raw bits",7,[[]]],[0,"keypad","chip_8","Keys and keypad",null,null],[3,"Keypad","chip_8::keypad","16-key hexadecimal keypad",null,null],[4,"KeyState","","Possible state for each key",null,null],[13,"NotPressed","","Key not pressed",9,null],[13,"Pressed","","Key pressed",9,null],[4,"Key","","Individual key on the [`Keypad`]",null,null],[13,"Key0","","Key `0`",10,null],[13,"Key1","","Key `1`",10,null],[13,"Key2","","Key `2`",10,null],[13,"Key3","","Key `3`",10,null],[13,"Key4","","Key `4`",10,null],[13,"Key5","","Key `5`",10,null],[13,"Key6","","Key `6`",10,null],[13,"Key7","","Key `7`",10,null],[13,"Key8","","Key `8`",10,null],[13,"Key9","","Key `9`",10,null],[13,"KeyA","","Key `A`",10,null],[13,"KeyB","","Key `B`",10,null],[13,"KeyC","","Key `C`",10,null],[13,"KeyD","","Key `D`",10,null],[13,"KeyE","","Key `E`",10,null],[13,"KeyF","","Key `F`",10,null],[11,"new","","Creates a new instance with default state for each key",11,[[]]],[0,"memory","chip_8","Memory",null,null],[3,"Memory","chip_8::memory","RAM",null,null],[11,"new","","Creates a new instance intialized with `0`",12,[[]]],[11,"read","","Reads a byte at `addr`",12,[[["addr",3]]]],[11,"write","","Writes a `val` byte at `addr`",12,[[["addr",3]]]],[0,"vm","chip_8","Virtual machine",null,null],[3,"VM","chip_8::vm","Virtual machine",null,null],[11,"new","","Creates a new instance with the given RNG",13,[[]]],[11,"from","chip_8::display","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_string","","",14,[[],["string",3]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_string","","",15,[[],["string",3]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","chip_8::errors","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","chip_8::instructions","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"vzip","","",16,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","chip_8::keypad","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","chip_8::memory","",12,[[]]],[11,"into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","chip_8::vm","",13,[[]]],[11,"into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","chip_8::display","",14,[[]]],[11,"from","","",15,[[]]],[11,"from","chip_8::instructions","",8,[[]]],[11,"from","","",16,[[]]],[11,"clone","chip_8::display","",0,[[],["pixel",4]]],[11,"clone","","",1,[[],["drawresult",4]]],[11,"clone","","",2,[[],["xcoordinate",3]]],[11,"clone","","",3,[[],["ycoordinate",3]]],[11,"clone","chip_8::instructions","",6,[[],["vregister",4]]],[11,"clone","","",8,[[],["addr",3]]],[11,"clone","","",16,[[],["nibble",3]]],[11,"clone","","",7,[[],["instruction",4]]],[11,"clone","chip_8::keypad","",9,[[],["keystate",4]]],[11,"clone","","",10,[[],["key",4]]],[11,"clone","","",11,[[],["keypad",3]]],[11,"default","chip_8::display","",0,[[]]],[11,"default","","",4,[[]]],[11,"default","chip_8::keypad","",9,[[]]],[11,"default","","",11,[[]]],[11,"default","chip_8::memory","",12,[[]]],[11,"default","chip_8::vm","Creates a new instance with thread-local random number…",13,[[]]],[11,"eq","chip_8::display","",0,[[["pixel",4]]]],[11,"eq","","",1,[[["drawresult",4]]]],[11,"eq","","",2,[[["xcoordinate",3]]]],[11,"ne","","",2,[[["xcoordinate",3]]]],[11,"eq","","",3,[[["ycoordinate",3]]]],[11,"ne","","",3,[[["ycoordinate",3]]]],[11,"eq","","",14,[[["spriterow",3]]]],[11,"ne","","",14,[[["spriterow",3]]]],[11,"eq","","",15,[[["sprite",3]]]],[11,"ne","","",15,[[["sprite",3]]]],[11,"eq","chip_8::errors","",5,[[["chip8error",4]]]],[11,"ne","","",5,[[["chip8error",4]]]],[11,"eq","chip_8::instructions","",6,[[["vregister",4]]]],[11,"eq","","",8,[[["addr",3]]]],[11,"ne","","",8,[[["addr",3]]]],[11,"eq","","",16,[[["nibble",3]]]],[11,"ne","","",16,[[["nibble",3]]]],[11,"eq","","",7,[[["instruction",4]]]],[11,"ne","","",7,[[["instruction",4]]]],[11,"eq","chip_8::keypad","",9,[[["keystate",4]]]],[11,"eq","","",10,[[["key",4]]]],[11,"eq","","",11,[[["keypad",3]]]],[11,"ne","","",11,[[["keypad",3]]]],[11,"fmt","chip_8::display","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","chip_8::errors","",5,[[["formatter",3]],["result",6]]],[11,"fmt","chip_8::instructions","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","chip_8::keypad","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","chip_8::display","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","chip_8::errors","",5,[[["formatter",3]],["result",6]]],[11,"bitxor_assign","chip_8::display","",0,[[]]],[11,"index","chip_8::keypad","",11,[[["key",4]]]],[11,"index_mut","","",11,[[["key",4]]]],[11,"try_from","chip_8::instructions","",6,[[],["result",4]]],[11,"try_from","chip_8::keypad","",10,[[],["result",4]]]],"p":[[4,"Pixel"],[4,"DrawResult"],[3,"XCoordinate"],[3,"YCoordinate"],[3,"Display"],[4,"Chip8Error"],[4,"VRegister"],[4,"Instruction"],[3,"Addr"],[4,"KeyState"],[4,"Key"],[3,"Keypad"],[3,"Memory"],[3,"VM"],[3,"SpriteRow"],[3,"Sprite"],[3,"Nibble"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);